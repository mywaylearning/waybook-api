# Set to appropriate web server user
#user nobody;

worker_processes auto;

error_log  /usr/local/var/log/nginx/error.log debug;

#pid  logs/nginx.pid

# log_format bodylog '$remote_addr - $remote_user [$time_local] '
#     '"$request" $status $body_bytes_sent '
#     '"$http_referer" "$http_user_agent" $request_time '
#     '<"$request_body" >"$resp_body"';

#lua_need_request_body on;


# body_filter_by_lua '
#   local resp_body = string.sub(ngx.arg[1], 1, 1000)
#   ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
#   if ngx.arg[2] then
#     ngx.var.resp_body = ngx.ctx.buffered
#   end
# ';


events {
  worker_connections  1024;
}

http {
  include  mime.types;
  default_type  text/html;
  sendfile  on;
  keepalive_timeout  30;
  gzip on;
  server_tokens off;


  log_format bodylog '$remote_addr - $remote_user [$time_local] '
      '"$request" $status $body_bytes_sent '
      '"$http_referer" "$http_user_agent" $request_time '
      '<"$request_body" >"$resp_body"';

  lua_need_request_body on;

  body_filter_by_lua '
    local resp_body = string.sub(ngx.arg[1], 1, 1000)
    ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
    if ngx.arg[2] then
      ngx.var.resp_body = ngx.ctx.buffered
    end
  ';

  server {
    listen 8080;
    listen [::]:8080;
    server_name localdev.way.me;
    # port does not need to be explicit if it's 443
    return 301 https://$server_name:8443$request_uri;
  }

  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;

  server {
    # listen 8443 default_server ssl spdy;
    listen 8443 default_server ssl;

    keepalive_timeout 70;
    server_name 127.0.0.1;

    ssl_certificate /usr/local/etc/nginx/ssl/wildcard-way.me.crt;
    ssl_certificate_key /usr/local/etc/nginx/ssl/wildcard-way.me.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # send https requests on to the API server
    location /login {
      set $resp_body "";
      # base64 encode client id and client secret
      # node -p "new Buffer('clientid:clientsecret').toString('base64');"
      proxy_set_header Authorization 'Basic NGM3OTRkZDUzNzI5ZmE4ZjU1Yjk3ZGYyMWU0OGM3YjY6YTVkMDk5YjEyNjcwMGFmZWM1YWNkNWQyZjVmOTRlMzNjNWI2YTQxOQ==';
      proxy_hide_header X-Powered-By;
      proxy_pass  http://127.0.0.1:3000/oauth/token;
      access_log /usr/local/var/log/nginx/proxy.log bodylog;
    }

    location /refresh {
      set $resp_body "";
      proxy_set_header Authorization 'Basic NGM3OTRkZDUzNzI5ZmE4ZjU1Yjk3ZGYyMWU0OGM3YjY6YTVkMDk5YjEyNjcwMGFmZWM1YWNkNWQyZjVmOTRlMzNjNWI2YTQxOQ==';
      proxy_hide_header X-Powered-By;
      proxy_pass  http://127.0.0.1:3000/oauth/token;
      access_log /usr/local/var/log/nginx/proxy.log bodylog;
    }
  }
}